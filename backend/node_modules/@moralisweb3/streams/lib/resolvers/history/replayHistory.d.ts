import { operations } from '../../generated/types';
declare const name = "ReplayHistory";
declare type Name = typeof name;
declare type PathParams = operations[Name]['parameters']['path'];
declare type ApiParams = PathParams;
export declare type ReplayHistoryParams = ApiParams;
export declare const replayHistory: import("@moralisweb3/api-utils").EndpointFactory<{
    id: string;
}, {
    id: string;
}, {
    id: string;
    date: string;
    payload: {
        erc20Transfers: {
            transactionHash: string;
            contract: string;
            logIndex: string;
            tag: string;
            from: string;
            to: string;
            value: string;
            tokenDecimals: string;
            tokenName: string;
            tokenSymbol: string;
            valueWithDecimals?: string | undefined;
        }[];
        erc20Approvals: {
            transactionHash: string;
            contract: string;
            logIndex: string;
            tag: string;
            owner: string;
            spender: string;
            value: string;
            tokenDecimals: string;
            tokenName: string;
            tokenSymbol: string;
            valueWithDecimals?: string | undefined;
        }[];
        nftTransfers: {
            transactionHash: string;
            contract: string;
            logIndex: string;
            tag: string;
            tokenContractType: string;
            tokenName: string;
            tokenSymbol: string;
            operator: string | null;
            from: string;
            to: string;
            tokenId: string;
            amount: string;
        }[];
        nftApprovals: {
            ERC721: {
                transactionHash: string;
                contract: string;
                logIndex: string;
                tag: string;
                owner: string;
                approved: string;
                tokenId: string;
                tokenContractType: string;
                tokenName: string;
                tokenSymbol: string;
            }[];
            ERC1155: {
                transactionHash: string;
                contract: string;
                logIndex: string;
                tag: string;
                account: string;
                operator: string;
                approved: boolean;
                tokenContractType: string;
                tokenName: string;
                tokenSymbol: string;
            }[];
        };
        block: {
            number: string;
            hash: string;
            timestamp: string;
        };
        chainId: string;
        logs: {
            tag: string;
            streamId: string;
            logIndex: string;
            transactionHash: string;
            address: string;
            data: string;
            topic0: string | null;
            topic1: string | null;
            topic2: string | null;
            topic3: string | null;
        }[];
        txs: {
            tag: string;
            streamId: string;
            hash: string;
            gas: string | null;
            gasPrice: string | null;
            nonce: string | null;
            input: string | null;
            transactionIndex: string;
            fromAddress: string;
            toAddress: string | null;
            value: string | null;
            type: string | null;
            v: string | null;
            r: string | null;
            s: string | null;
            receiptCumulativeGasUsed: string | null;
            receiptGasUsed: string | null;
            receiptContractAddress: string | null;
            receiptRoot: string | null;
            receiptStatus: string | null;
        }[];
        txsInternal: {
            from: string | null;
            to: string | null;
            value: string | null;
            transactionHash: string;
            gas: string | null;
            streamId: string;
            tag: string;
        }[];
        abis: {
            [key: string]: {
                anonymous?: boolean | undefined;
                constant?: boolean | undefined;
                inputs?: {
                    name: string;
                    type: string;
                    indexed?: boolean | undefined;
                    components?: any[] | undefined;
                    internalType?: string | undefined;
                }[] | undefined;
                name?: string | undefined;
                outputs?: {
                    name: string;
                    type: string;
                    components?: any[] | undefined;
                    internalType?: string | undefined;
                }[] | undefined;
                payable?: boolean | undefined;
                stateMutability?: "pure" | "view" | "nonpayable" | "payable" | undefined;
                type: "function" | "constructor" | "event" | "fallback";
                gas?: number | undefined;
            }[];
        };
        retries: number;
        confirmed: boolean;
    };
    errorMessage: string;
    webhookUrl: string;
}, {
    id: string;
    date: string;
    payload: {
        erc20Transfers: {
            transactionHash: string;
            contract: string;
            logIndex: string;
            tag: string;
            from: string;
            to: string;
            value: string;
            tokenDecimals: string;
            tokenName: string;
            tokenSymbol: string;
            valueWithDecimals?: string | undefined;
        }[];
        erc20Approvals: {
            transactionHash: string;
            contract: string;
            logIndex: string;
            tag: string;
            owner: string;
            spender: string;
            value: string;
            tokenDecimals: string;
            tokenName: string;
            tokenSymbol: string;
            valueWithDecimals?: string | undefined;
        }[];
        nftTransfers: {
            transactionHash: string;
            contract: string;
            logIndex: string;
            tag: string;
            tokenContractType: string;
            tokenName: string;
            tokenSymbol: string;
            operator: string | null;
            from: string;
            to: string;
            tokenId: string;
            amount: string;
        }[];
        nftApprovals: {
            ERC721: {
                transactionHash: string;
                contract: string;
                logIndex: string;
                tag: string;
                owner: string;
                approved: string;
                tokenId: string;
                tokenContractType: string;
                tokenName: string;
                tokenSymbol: string;
            }[];
            ERC1155: {
                transactionHash: string;
                contract: string;
                logIndex: string;
                tag: string;
                account: string;
                operator: string;
                approved: boolean;
                tokenContractType: string;
                tokenName: string;
                tokenSymbol: string;
            }[];
        };
        block: {
            number: string;
            hash: string;
            timestamp: string;
        };
        chainId: string;
        logs: {
            tag: string;
            streamId: string;
            logIndex: string;
            transactionHash: string;
            address: string;
            data: string;
            topic0: string | null;
            topic1: string | null;
            topic2: string | null;
            topic3: string | null;
        }[];
        txs: {
            tag: string;
            streamId: string;
            hash: string;
            gas: string | null;
            gasPrice: string | null;
            nonce: string | null;
            input: string | null;
            transactionIndex: string;
            fromAddress: string;
            toAddress: string | null;
            value: string | null;
            type: string | null;
            v: string | null;
            r: string | null;
            s: string | null;
            receiptCumulativeGasUsed: string | null;
            receiptGasUsed: string | null;
            receiptContractAddress: string | null;
            receiptRoot: string | null;
            receiptStatus: string | null;
        }[];
        txsInternal: {
            from: string | null;
            to: string | null;
            value: string | null;
            transactionHash: string;
            gas: string | null;
            streamId: string;
            tag: string;
        }[];
        abis: {
            [key: string]: {
                anonymous?: boolean | undefined;
                constant?: boolean | undefined;
                inputs?: {
                    name: string;
                    type: string;
                    indexed?: boolean | undefined;
                    components?: any[] | undefined;
                    internalType?: string | undefined;
                }[] | undefined;
                name?: string | undefined;
                outputs?: {
                    name: string;
                    type: string;
                    components?: any[] | undefined;
                    internalType?: string | undefined;
                }[] | undefined;
                payable?: boolean | undefined;
                stateMutability?: "pure" | "view" | "nonpayable" | "payable" | undefined;
                type: "function" | "constructor" | "event" | "fallback";
                gas?: number | undefined;
            }[];
        };
        retries: number;
        confirmed: boolean;
    };
    errorMessage: string;
    webhookUrl: string;
}, {
    id: string;
    date: string;
    payload: {
        erc20Transfers: {
            transactionHash: string;
            contract: string;
            logIndex: string;
            tag: string;
            from: string;
            to: string;
            value: string;
            tokenDecimals: string;
            tokenName: string;
            tokenSymbol: string;
            valueWithDecimals?: string | undefined;
        }[];
        erc20Approvals: {
            transactionHash: string;
            contract: string;
            logIndex: string;
            tag: string;
            owner: string;
            spender: string;
            value: string;
            tokenDecimals: string;
            tokenName: string;
            tokenSymbol: string;
            valueWithDecimals?: string | undefined;
        }[];
        nftTransfers: {
            transactionHash: string;
            contract: string;
            logIndex: string;
            tag: string;
            tokenContractType: string;
            tokenName: string;
            tokenSymbol: string;
            operator: string | null;
            from: string;
            to: string;
            tokenId: string;
            amount: string;
        }[];
        nftApprovals: {
            ERC721: {
                transactionHash: string;
                contract: string;
                logIndex: string;
                tag: string;
                owner: string;
                approved: string;
                tokenId: string;
                tokenContractType: string;
                tokenName: string;
                tokenSymbol: string;
            }[];
            ERC1155: {
                transactionHash: string;
                contract: string;
                logIndex: string;
                tag: string;
                account: string;
                operator: string;
                approved: boolean;
                tokenContractType: string;
                tokenName: string;
                tokenSymbol: string;
            }[];
        };
        block: {
            number: string;
            hash: string;
            timestamp: string;
        };
        chainId: string;
        logs: {
            tag: string;
            streamId: string;
            logIndex: string;
            transactionHash: string;
            address: string;
            data: string;
            topic0: string | null;
            topic1: string | null;
            topic2: string | null;
            topic3: string | null;
        }[];
        txs: {
            tag: string;
            streamId: string;
            hash: string;
            gas: string | null;
            gasPrice: string | null;
            nonce: string | null;
            input: string | null;
            transactionIndex: string;
            fromAddress: string;
            toAddress: string | null;
            value: string | null;
            type: string | null;
            v: string | null;
            r: string | null;
            s: string | null;
            receiptCumulativeGasUsed: string | null;
            receiptGasUsed: string | null;
            receiptContractAddress: string | null;
            receiptRoot: string | null;
            receiptStatus: string | null;
        }[];
        txsInternal: {
            from: string | null;
            to: string | null;
            value: string | null;
            transactionHash: string;
            gas: string | null;
            streamId: string;
            tag: string;
        }[];
        abis: {
            [key: string]: {
                anonymous?: boolean | undefined;
                constant?: boolean | undefined;
                inputs?: {
                    name: string;
                    type: string;
                    indexed?: boolean | undefined;
                    components?: any[] | undefined;
                    internalType?: string | undefined;
                }[] | undefined;
                name?: string | undefined;
                outputs?: {
                    name: string;
                    type: string;
                    components?: any[] | undefined;
                    internalType?: string | undefined;
                }[] | undefined;
                payable?: boolean | undefined;
                stateMutability?: "pure" | "view" | "nonpayable" | "payable" | undefined;
                type: "function" | "constructor" | "event" | "fallback";
                gas?: number | undefined;
            }[];
        };
        retries: number;
        confirmed: boolean;
    };
    errorMessage: string;
    webhookUrl: string;
}>;
export {};
//# sourceMappingURL=replayHistory.d.ts.map